import sqlite3
import faiss
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
import pickle

class VetDB:
    DB_NAME = r"C:\Users\banas\OneDrive\‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£\GitHub\ChatbotCatStore\database\vet_doc.db"
    FAISS_INDEX_FILE = r"C:\Users\banas\OneDrive\‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£\GitHub\ChatbotCatStore\vectordb\vet_doc_faiss_index.pkl"
    TFIDF_VECTORIZER_FILE = r"C:\Users\banas\OneDrive\‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£\GitHub\ChatbotCatStore\vectordb\vet_doc_tfidf_vectorizer.pkl"

    @staticmethod
    def _connect():
        """Establish a database connection."""
        return sqlite3.connect(VetDB.DB_NAME)

    @staticmethod
    def create_tables():
        """Create tables for cat veterinary records."""
        with VetDB._connect() as conn:
            cursor = conn.cursor()

            # Cats Table
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS vet_doc (
                data_id INTEGER PRIMARY KEY AUTOINCREMENT,
                symptoms TEXT NOT NULL,
                cause TEXT,
                diagnosis TEXT,
                treatment TEXT
            )
            """)

            conn.commit()
        print("‚úÖ Tables created successfully!")

    @staticmethod
    def add_vet_doc(symptoms, cause, diagnosis, treatment):
        """Add a veterinary record to the database."""
        
        with VetDB._connect() as conn: 
            cursor = conn.cursor()
            cursor.execute("""
            INSERT INTO vet_doc (symptoms, cause, diagnosis, treatment)
            VALUES (?, ?, ?, ?)
            """, (symptoms, cause, diagnosis, treatment))
            conn.commit()
        print(f"üê± Symptoms: {symptoms}, Diagnosis: {diagnosis}, Treatment: {treatment}")


 

    @staticmethod
    def get_all_vet_doc():
        """Fetch all medical records."""
        with VetDB._connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM vet_doc")
            return cursor.fetchall()


class VetFAISS:
    def __init__(self):
        """Initialize FAISS and TF-IDF vectorizer."""
        self.vectorizer = TfidfVectorizer()
        self.index = None

    def build_faiss_index(self):
        """Convert medical records into FAISS searchable index."""
        records = VetDB.get_all_vet_doc()
        if not records:
            print("‚ö†Ô∏è No medical records found!")
            return

        texts = [f"{symptoms} {diagnosis}" for _, _, _, symptoms, diagnosis in records]

        # Convert texts into TF-IDF vectors
        X = self.vectorizer.fit_transform(texts).toarray()
        dim = X.shape[1]

        # Create FAISS index
        self.index = faiss.IndexFlatL2(dim)
        self.index.add(np.array(X, dtype=np.float32))

        # Save FAISS index and vectorizer
        with open(VetDB.FAISS_INDEX_FILE, "wb") as f:
            pickle.dump(self.index, f)
        with open(VetDB.TFIDF_VECTORIZER_FILE, "wb") as f:
            pickle.dump(self.vectorizer, f)

        print("‚úÖ FAISS index built and saved!")

    @staticmethod
    def search_vet_doc(query_text, top_k=3):
        """Search FAISS index using symptoms as query."""
        try:
            with open(VetDB.FAISS_INDEX_FILE, "rb") as f:
                index = pickle.load(f)
            with open(VetDB.TFIDF_VECTORIZER_FILE, "rb") as f:
                vectorizer = pickle.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è FAISS index not found! Run `build_faiss_index()` first.")
            return []

        # Convert query into vector
        query_vec = vectorizer.transform([query_text]).toarray().astype(np.float32)

        # Perform search
        D, I = index.search(query_vec, top_k)

        # Get matching records
        records = VetDB.get_all_vet_doc()
        results = [records[i] for i in I[0] if i >= 0]

        return results



# üîπ Example Usage
if __name__ == "__main__":
    # Initialize Database and FAISS
    VetDB.create_tables()
    vet_faiss = VetFAISS()

    # Add Vetdoc 
    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏°‡∏ß", 
                    "‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏• ‡πÑ‡∏≠ ‡∏à‡∏≤‡∏° ‡∏ï‡∏≤‡πÅ‡∏î‡∏á ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡πÑ‡∏´‡∏• ‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏°‡∏µ‡πÑ‡∏Ç‡πâ", 
                    "‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™ ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ß‡∏£‡∏±‡∏™‡πÄ‡∏Æ‡∏≠‡∏£‡πå‡∏õ‡∏µ‡∏™‡πå (Feline Herpesvirus) ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡∏≤‡∏•‡∏¥‡∏ã‡∏¥‡πÑ‡∏ß‡∏£‡∏±‡∏™ (Calicivirus) ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô Chlamydophila felis", 
                    "‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏õ‡∏è‡∏¥‡∏ä‡∏µ‡∏ß‡∏ô‡∏∞ (‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢) ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å ‡∏•‡∏î‡πÑ‡∏Ç‡πâ ‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏°‡∏ß‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡πÄ‡∏≠‡∏î‡∏™‡πå‡πÅ‡∏°‡∏ß (FIV)", 
                    "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î ‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≥ ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡πÑ‡∏™‡πâ‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö ‡πÄ‡∏´‡∏á‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö ‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£", 
                    "‡πÑ‡∏ß‡∏£‡∏±‡∏™ FIV ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏î‡∏Å‡∏±‡∏ô", 
                    "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏õ‡∏è‡∏¥‡∏ä‡∏µ‡∏ß‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πâ‡∏≠‡∏ô")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡πÅ‡∏°‡∏ß (FeLV)", 
                    "‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢ ‡∏ã‡∏µ‡∏î ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î ‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≥ ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏á‡πà‡∏≤‡∏¢ ‡∏°‡∏µ‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏á‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡πÉ‡∏ô‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ", 
                    "‡πÑ‡∏ß‡∏£‡∏±‡∏™ FeLV ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏≤‡∏¢ ‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞", 
                    "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏°‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡πÅ‡∏°‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á (CKD)", 
                    "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î ‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ã‡∏∂‡∏°", 
                    "‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏ï‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏™‡∏π‡∏á", 
                    "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏ï‡πâ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏Ç‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢ ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏£")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£", 
                    "‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß ‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡∏ó‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡∏î ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î ‡∏û‡∏ö‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞", 
                    "‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏° ‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏ï‡∏±‡∏ß‡∏ï‡∏∑‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏õ‡∏≤‡∏Å‡∏Ç‡∏≠ ‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏Ç‡πà‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô", 
                    "‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏ò‡∏¥ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏∏‡∏Ç‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ß")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÉ‡∏ô‡πÅ‡∏°‡∏ß (Ringworm)", 
                    "‡∏Ç‡∏ô‡∏£‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á ‡πÜ ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÅ‡∏î‡∏á ‡∏Ñ‡∏±‡∏ô ‡∏°‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡πá‡∏î‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏∏‡∏¢ ‡∏≠‡∏≤‡∏à‡∏•‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏¥‡∏î‡∏Ñ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏≠‡∏∑‡πà‡∏ô", 
                    "‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° Dermatophytes ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á", 
                    "‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ó‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏≤ Miconazole ‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ä‡∏°‡∏û‡∏π‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏°‡∏ß (Feline Diabetes Mellitus)", 
                    "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞ ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡πÅ‡∏ï‡πà‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏≤‡∏Å ‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢ ‡∏ã‡∏∂‡∏°", 
                    "‡∏†‡∏≤‡∏ß‡∏∞‡∏î‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡∏ã‡∏π‡∏•‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏ô‡∏ã‡∏π‡∏•‡∏¥‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡πâ‡∏ß‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á", 
                    "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï‡∏ï‡πà‡∏≥ ‡∏â‡∏µ‡∏î‡∏≠‡∏¥‡∏ô‡∏ã‡∏π‡∏•‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ï‡∏ß‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")

    VetDB.add_vet_doc("‡πÇ‡∏£‡∏Ñ‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏°‡∏ß (Feline Hepatic Lipidosis)", 
                  "‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏ï‡∏±‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢ ‡∏ã‡∏∂‡∏°", 
                  "‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏ß‡∏∞‡∏Ç‡∏≤‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏™‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏ï‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏à‡∏ô‡∏ï‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", 
                  "‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏°‡∏ß‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏¢‡∏¢‡∏≤‡∏á ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏¢‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏ï‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏™‡∏±‡∏ï‡∏ß‡πÅ‡∏û‡∏ó‡∏¢‡πå")

    # Build FAISS Index
    vet_faiss.build_faiss_index()

    query = "‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
    similar_cases = vet_faiss.search_vet_doc(query, top_k=2)

    print("\nüîç Search Results for:", query)
    for case in similar_cases:
        if len(case) == 5:  # Ensure the tuple has the expected number of elements
            print(f"üìã Record ID: {case[0]}, Cat ID: {case[1]}, Symptoms: {case[2]}, Diagnosis: {case[3]}, Treatment: {case[4]}")
        else:
            print("‚ö†Ô∏è Unexpected tuple length:", case)
